name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Total job timeout


    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt

    - name: Lint with black
      run: |
        source .venv/bin/activate
        black src tests --check

    - name: Type check with mypy
      run: |
        source .venv/bin/activate
        mypy src

    - name: Security check with bandit
      run: |
        source .venv/bin/activate
        bandit -r src

    - name: Setup Database
      run: |
        source .venv/bin/activate
        python manage.py migrate
        python manage.py seed

    - name: Run tests
      timeout-minutes: 5  # Timeout for just the test step
      run: |
        source .venv/bin/activate
        pytest

    - name: Generate coverage report
      run: |
        source .venv/bin/activate
        coverage run -m pytest
        coverage report

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Total job timeout

    steps:
    - uses: actions/checkout@v3

    # - name: Check Required Secrets
    #   id: check_secrets
    #   uses: actions/github-script@v7
    #   env:
    #     ZM_CLIENT_ID: ${{ secrets.PROD_ZM_CLIENT_ID }}
    #     ZM_CLIENT_SECRET: ${{ secrets.PROD_ZM_CLIENT_SECRET }}
    #     RECALL_API_TOKEN: ${{ secrets.PROD_RECALL_API_TOKEN }}
    #     ANTHROPIC_API_TOKEN: ${{ secrets.PROD_ANTHROPIC_API_TOKEN }}
    #     # Add other secrets here
    #   with:
    #     script: |
    #       const fs = require('fs');
    #       const envFile = fs.readFileSync('server/.env.sample', 'utf8');
    #       const githubSecrets = JSON.parse(process.env.GITHUB_SECRETS);
          
    #       // Extract variables from .env.sample
    #       const requiredSecrets = envFile
    #         .split('\n')
    #         .filter(line => line && !line.startsWith('#'))
    #         .map(line => line.split('=')[0].trim());
          
    #       const missingVars = [];
          
    #       // Check for each required variable
    #       for (const varName of requiredSecrets) {
    #         const secretName = `PROD_${varName}`;
    #         if (!githubSecrets[secretName]) {
    #           missingVars.push(varName);


    #       const missingSecrets = [];

    #       for (const secretName of requiredSecrets) {
    #         if (!process.env[secretName]) {
    #           missingSecrets.push(secretName);
    #         }
    #       }

    #       if (missingSecrets.length > 0) {
    #         core.warning(`Missing required secrets: ${missingSecrets.join(', ')}`);
    #         core.setOutput('missing_secrets', 'true');
    #       } else {
    #         core.setOutput('missing_secrets', 'false');
    #       }

    - name: Prepare to deploy to Server
      # if: steps.check_secrets.outputs.missing_secrets == 'false'
      run: |
        echo "Preparing to deploy, if there is new environment variables, please add to .env "
        mkdir -p ~/.ssh/
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Server
      # if: steps.check_secrets.outputs.missing_secrets == 'false'
      env:
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      run: |
        echo "All secrets present, proceeding with deployment..."
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST '
          bash -l -c "
          cd /home/ubuntu/play/august &&
          git pull &&
          npm run install:all &&
          npm run build &&
          cd server &&
          npm run migrate &&
          npm run seed &&
          cd .. &&
          npm install -g pm2 &&
          pm2 restart ecosystem.config.js
          "
        '

    - name: Build Docker image
      run: |
        docker build -t wl-server .

    - name: Push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker tag scenic-road-app $DOCKER_USERNAME/scenic-road-app:latest
        docker push $DOCKER_USERNAME/scenic-road-app:latest
